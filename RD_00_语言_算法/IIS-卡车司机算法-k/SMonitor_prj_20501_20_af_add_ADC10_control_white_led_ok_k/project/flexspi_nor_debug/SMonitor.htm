<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [flexspi_nor_debug\SMonitor.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image flexspi_nor_debug\SMonitor.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Fri Jun  2 17:51:04 2023
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[4d]">ADC1_IRQHandler</a>
 <LI><a href="#[59]">ADC_ETC_ERROR_IRQ_IRQHandler</a>
 <LI><a href="#[55]">ADC_ETC_IRQ0_IRQHandler</a>
 <LI><a href="#[56]">ADC_ETC_IRQ1_IRQHandler</a>
 <LI><a href="#[57]">ADC_ETC_IRQ2_IRQHandler</a>
 <LI><a href="#[58]">ADC_ETC_IRQ3_IRQHandler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[34]">CCM_1_IRQHandler</a>
 <LI><a href="#[35]">CCM_2_IRQHandler</a>
 <LI><a href="#[1d]">CORE_IRQHandler</a>
 <LI><a href="#[3b]">CSU_IRQHandler</a>
 <LI><a href="#[1b]">CTI0_ERROR_IRQHandler</a>
 <LI><a href="#[1c]">CTI1_ERROR_IRQHandler</a>
 <LI><a href="#[4f]">DCDC_IRQHandler</a>
 <LI><a href="#[3c]">DCP_IRQHandler</a>
 <LI><a href="#[3d]">DCP_VMI_IRQHandler</a>
 <LI><a href="#[5e]">DMA0_DriverIRQHandler</a>
 <LI><a href="#[68]">DMA10_DriverIRQHandler</a>
 <LI><a href="#[69]">DMA11_DriverIRQHandler</a>
 <LI><a href="#[6a]">DMA12_DriverIRQHandler</a>
 <LI><a href="#[6b]">DMA13_DriverIRQHandler</a>
 <LI><a href="#[6c]">DMA14_DriverIRQHandler</a>
 <LI><a href="#[6d]">DMA15_DriverIRQHandler</a>
 <LI><a href="#[5f]">DMA1_DriverIRQHandler</a>
 <LI><a href="#[60]">DMA2_DriverIRQHandler</a>
 <LI><a href="#[61]">DMA3_DriverIRQHandler</a>
 <LI><a href="#[62]">DMA4_DriverIRQHandler</a>
 <LI><a href="#[63]">DMA5_DriverIRQHandler</a>
 <LI><a href="#[64]">DMA6_DriverIRQHandler</a>
 <LI><a href="#[65]">DMA7_DriverIRQHandler</a>
 <LI><a href="#[66]">DMA8_DriverIRQHandler</a>
 <LI><a href="#[67]">DMA9_DriverIRQHandler</a>
 <LI><a href="#[6e]">DMA_ERROR_DriverIRQHandler</a>
 <LI><a href="#[7]">DebugMon_Handler</a>
 <LI><a href="#[5a]">DefaultISR</a>
 <LI><a href="#[36]">EWM_IRQHandler</a>
 <LI><a href="#[7c]">FLEXIO1_DriverIRQHandler</a>
 <LI><a href="#[25]">FLEXRAM_IRQHandler</a>
 <LI><a href="#[73]">FLEXSPI_DriverIRQHandler</a>
 <LI><a href="#[4c]">GPC_IRQHandler</a>
 <LI><a href="#[51]">GPIO1_Combined_16_31_IRQHandler</a>
 <LI><a href="#[52]">GPIO2_Combined_0_15_IRQHandler</a>
 <LI><a href="#[53]">GPIO5_Combined_0_15_IRQHandler</a>
 <LI><a href="#[33]">GPR_IRQ_IRQHandler</a>
 <LI><a href="#[28]">GPT1_IRQHandler</a>
 <LI><a href="#[31]">KPP_IRQHandler</a>
 <LI><a href="#[76]">LPSPI1_DriverIRQHandler</a>
 <LI><a href="#[77]">LPSPI2_DriverIRQHandler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[22]">PIT_IRQHandler</a>
 <LI><a href="#[47]">PMU_IRQHandler</a>
 <LI><a href="#[2c]">PWM1_0_IRQHandler</a>
 <LI><a href="#[2d]">PWM1_1_IRQHandler</a>
 <LI><a href="#[2e]">PWM1_2_IRQHandler</a>
 <LI><a href="#[2f]">PWM1_3_IRQHandler</a>
 <LI><a href="#[30]">PWM1_FAULT_IRQHandler</a>
 <LI><a href="#[43]">RTWDOG_IRQHandler</a>
 <LI><a href="#[3e]">Reserved68_IRQHandler</a>
 <LI><a href="#[40]">Reserved70_IRQHandler</a>
 <LI><a href="#[41]">Reserved71_IRQHandler</a>
 <LI><a href="#[39]">SNVS_HP_WRAPPER_TZ_IRQHandler</a>
 <LI><a href="#[3a]">SNVS_LP_WRAPPER_IRQHandler</a>
 <LI><a href="#[7b]">SPDIF_DriverIRQHandler</a>
 <LI><a href="#[32]">SRC_IRQHandler</a>
 <LI><a href="#[49]">TEMP_LOW_HIGH_IRQHandler</a>
 <LI><a href="#[4a]">TEMP_PANIC_IRQHandler</a>
 <LI><a href="#[3f]">TRNG_IRQHandler</a>
 <LI><a href="#[23]">USB_OTG1_IRQHandler</a>
 <LI><a href="#[4b]">USB_PHY_IRQHandler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[54]">WDOG1_IRQHandler</a>
 <LI><a href="#[37]">WDOG2_IRQHandler</a>
 <LI><a href="#[48]">XBAR1_IRQ_0_1_2_3_IRQHandler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[a]">DMA0_IRQHandler</a>
 <LI><a href="#[b]">DMA1_IRQHandler</a>
 <LI><a href="#[c]">DMA2_IRQHandler</a>
 <LI><a href="#[d]">DMA3_IRQHandler</a>
 <LI><a href="#[e]">DMA4_IRQHandler</a>
 <LI><a href="#[f]">DMA5_IRQHandler</a>
 <LI><a href="#[10]">DMA6_IRQHandler</a>
 <LI><a href="#[11]">DMA7_IRQHandler</a>
 <LI><a href="#[12]">DMA8_IRQHandler</a>
 <LI><a href="#[13]">DMA9_IRQHandler</a>
 <LI><a href="#[14]">DMA10_IRQHandler</a>
 <LI><a href="#[15]">DMA11_IRQHandler</a>
 <LI><a href="#[16]">DMA12_IRQHandler</a>
 <LI><a href="#[17]">DMA13_IRQHandler</a>
 <LI><a href="#[18]">DMA14_IRQHandler</a>
 <LI><a href="#[19]">DMA15_IRQHandler</a>
 <LI><a href="#[1a]">DMA_ERROR_IRQHandler</a>
 <LI><a href="#[1f]">LPUART2_IRQHandler</a>
 <LI><a href="#[20]">LPUART3_IRQHandler</a>
 <LI><a href="#[21]">LPUART4_IRQHandler</a>
 <LI><a href="#[24]">FLEXSPI_IRQHandler</a>
 <LI><a href="#[26]">LPI2C1_IRQHandler</a>
 <LI><a href="#[27]">LPI2C2_IRQHandler</a>
 <LI><a href="#[2a]">LPSPI1_IRQHandler</a>
 <LI><a href="#[2b]">LPSPI2_IRQHandler</a>
 <LI><a href="#[42]">SAI1_IRQHandler</a>
 <LI><a href="#[44]">SAI3_RX_IRQHandler</a>
 <LI><a href="#[45]">SAI3_TX_IRQHandler</a>
 <LI><a href="#[46]">SPDIF_IRQHandler</a>
 <LI><a href="#[4e]">FLEXIO1_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8b]">__aeabi_assert</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8b]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4d]">ADC1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[59]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[55]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[56]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[57]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[58]">ADC_ETC_IRQ3_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[34]">CCM_1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[35]">CCM_2_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[1d]">CORE_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[3b]">CSU_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[1b]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[1c]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[4f]">DCDC_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[3c]">DCP_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[3d]">DCP_VMI_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[5e]">DMA0_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[68]">DMA10_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[14]">DMA10_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[69]">DMA11_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[15]">DMA11_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[6a]">DMA12_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[16]">DMA12_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[6b]">DMA13_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[17]">DMA13_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[6c]">DMA14_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[18]">DMA14_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[6d]">DMA15_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[19]">DMA15_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[5f]">DMA1_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[b]">DMA1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[60]">DMA2_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[c]">DMA2_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[61]">DMA3_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[d]">DMA3_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[62]">DMA4_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[e]">DMA4_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[63]">DMA5_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[f]">DMA5_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[64]">DMA6_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[10]">DMA6_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[65]">DMA7_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[11]">DMA7_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[66]">DMA8_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[12]">DMA8_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[67]">DMA9_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[13]">DMA9_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[6e]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[1a]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[5a]">DefaultISR</a> from startup_mimxrt1011.o(.text) referenced from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[5a]">DefaultISR</a> from startup_mimxrt1011.o(.text) referenced 159 times from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[36]">EWM_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[7c]">FLEXIO1_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[4e]">FLEXIO1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[25]">FLEXRAM_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[73]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[24]">FLEXSPI_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[4c]">GPC_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[50]">GPIO1_Combined_0_15_IRQHandler</a> from sai_interrupt_record_playback.o(.text.GPIO1_Combined_0_15_IRQHandler) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[51]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[52]">GPIO2_Combined_0_15_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[53]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[33]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[28]">GPT1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[29]">GPT2_IRQHandler</a> from sai_interrupt_record_playback.o(.text.GPT2_IRQHandler) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[7e]">HAL_UartReceiveBlocking</a> from fsl_adapter_lpuart.o(.text.HAL_UartReceiveBlocking) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Init)
 <LI><a href="#[7d]">HAL_UartSendBlocking</a> from fsl_adapter_lpuart.o(.text.HAL_UartSendBlocking) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[31]">KPP_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[74]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[26]">LPI2C1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[75]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[27]">LPI2C2_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[76]">LPSPI1_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[2a]">LPSPI1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[77]">LPSPI2_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[2b]">LPSPI2_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[6f]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[1e]">LPUART1_IRQHandler</a> from sai_interrupt_record_playback.o(.text.LPUART1_IRQHandler) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[70]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[1f]">LPUART2_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[71]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[20]">LPUART3_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[72]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[21]">LPUART4_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[22]">PIT_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[47]">PMU_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[2c]">PWM1_0_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[2d]">PWM1_1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[2e]">PWM1_2_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[2f]">PWM1_3_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[30]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[43]">RTWDOG_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[3e]">Reserved68_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[40]">Reserved70_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[41]">Reserved71_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[78]">SAI1_DriverIRQHandler</a> from fsl_sai.o(.text.SAI1_DriverIRQHandler) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[42]">SAI1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[79]">SAI3_RX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_RX_DriverIRQHandler) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[44]">SAI3_RX_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[7a]">SAI3_TX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_TX_DriverIRQHandler) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[45]">SAI3_TX_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[38]">SNVS_HP_WRAPPER_IRQHandler</a> from sai_interrupt_record_playback.o(.text.SNVS_HP_WRAPPER_IRQHandler) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[39]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[3a]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[7b]">SPDIF_DriverIRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[46]">SPDIF_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[32]">SRC_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[5c]">SystemInit</a> from system_mimxrt1011.o(.text.SystemInit) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[49]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[4a]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[3f]">TRNG_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[23]">USB_OTG1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[4b]">USB_PHY_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[54]">WDOG1_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[37]">WDOG2_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[48]">XBAR1_IRQ_0_1_2_3_IRQHandler</a> from startup_mimxrt1011.o(.text) referenced from startup_mimxrt1011.o(.isr_vector)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1011.o(.text)
 <LI><a href="#[5b]">main</a> from sai_interrupt_record_playback.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[80]">rx_callback</a> from sai_interrupt_record_playback.o(.text.rx_callback) referenced 2 times from sai_interrupt_record_playback.o(.text.SAI1_init)
 <LI><a href="#[81]">rx_callback3</a> from sai_interrupt_record_playback.o(.text.rx_callback3) referenced 2 times from sai_interrupt_record_playback.o(.text.main)
 <LI><a href="#[81]">rx_callback3</a> from sai_interrupt_record_playback.o(.text.rx_callback3) referenced 2 times from sai_interrupt_record_playback.o(.text.outstandby)
 <LI><a href="#[7f]">tx_callback</a> from sai_interrupt_record_playback.o(.text.tx_callback) referenced 2 times from sai_interrupt_record_playback.o(.text.SAI1_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e7]"></a>CLOCK_SET_MUX</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, lpm.o(CodeQuickAccess))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchSystemClocks
</UL>

<P><STRONG><a name="[e8]"></a>CLOCK_SET_DIV</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lpm.o(CodeQuickAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SET_DIV
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchSystemClocks
</UL>

<P><STRONG><a name="[e9]"></a>LPM_EnterSleepMode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lpm.o(CodeQuickAccess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>

<P><STRONG><a name="[9f]"></a>SwitchSystemClocks</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, specific.o(CodeQuickAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SwitchSystemClocks &rArr; CLOCK_SET_DIV
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SET_DIV
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SET_MUX
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToLowSpeedRun (via Veneer)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToOverDriveRun (via Veneer)
</UL>

<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[82]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[88]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[eb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ec]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ed]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ee]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ef]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[4d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[59]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[55]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[56]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[57]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[58]"></a>ADC_ETC_IRQ3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>CORE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>CSU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[4f]"></a>DCDC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>DCP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[5e]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>DMA10_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>DMA11_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>DMA12_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>DMA13_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>DMA14_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>DMA15_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>DMA3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>DMA4_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>DMA5_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>DMA6_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>DMA7_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>DMA8_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>DMA9_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[5a]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fsl_lpuart.o(.data.s_lpuartIsr)
<LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>EWM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[7c]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[73]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>GPC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[51]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[52]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[53]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>GPT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>KPP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[76]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>PIT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>PMU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[7b]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>SRC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>TRNG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[4b]"></a>USB_PHY_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[54]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>XBAR1_IRQ_0_1_2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1011.o(.text)
<LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1011.o(.text)
<LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1011.o(.text)
<LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1011.o(.text)
<LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1011.o(.text)
<LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1011.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[84]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
</UL>

<P><STRONG><a name="[f0]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
</UL>

<P><STRONG><a name="[8a]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TransferRxHandleIRQ
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortSend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortReceive
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDefaultConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetClassicI2SConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxCreateHandle
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxCreateHandle
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetDefaultConfig
</UL>

<P><STRONG><a name="[ac]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>ADC_DoAutoCalibration</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_adc.o(.text.ADC_DoAutoCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>ADC_GetDefaultConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_adc.o(.text.ADC_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>ADC_Init</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, fsl_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>ADC_SetChannelConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fsl_adc.o(.text.ADC_SetChannelConfig))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>APP_PrintRunFrequency</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, specific.o(.text.APP_PrintRunFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1138 bytes, Stack size 24 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_InitSysPfd
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitEnetPll
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPfd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[96]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 732 bytes, Stack size 32 bytes, board.o(.text.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BOARD_ConfigMPU
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, board.o(.text.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>BOARD_InitBootClocks</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock_config.o(.text.BOARD_InitBootClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BOARD_InitBootClocks &rArr; BOARD_BootClockRUN &rArr; CLOCK_InitSysPfd
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, board.o(.text.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; HAL_UartInit &rArr; LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>BOARD_InitPins_work</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, pin_mux.o(.text.BOARD_InitPins_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOARD_InitPins_work
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
</UL>

<P><STRONG><a name="[95]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToLowSpeedRun
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
</UL>

<P><STRONG><a name="[a3]"></a>CLOCK_DeinitEnetPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToLowSpeedRun
</UL>

<P><STRONG><a name="[bd]"></a>CLOCK_DeinitExternalClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitExternalClk))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
</UL>

<P><STRONG><a name="[bf]"></a>CLOCK_DeinitRcOsc24M</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
</UL>

<P><STRONG><a name="[a0]"></a>CLOCK_DeinitSysPfd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitSysPfd))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToLowSpeedRun
</UL>

<P><STRONG><a name="[a2]"></a>CLOCK_DeinitUsb1Pfd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitUsb1Pfd))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToLowSpeedRun
</UL>

<P><STRONG><a name="[a1]"></a>CLOCK_DeinitUsb1Pll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitUsb1Pll))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToLowSpeedRun
</UL>

<P><STRONG><a name="[e1]"></a>CLOCK_DisableUsbhs0PhyPllClock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DisableUsbhs0PhyPllClock))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>CLOCK_GetCoreFreq</STRONG> (Thumb, 594 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetCoreFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_GetCoreFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9d]"></a>CLOCK_GetFreq</STRONG> (Thumb, 1720 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetCoreFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
</UL>

<P><STRONG><a name="[98]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[a7]"></a>CLOCK_InitAudioPll</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitAudioPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitAudioPll
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToOverDriveRun
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
</UL>

<P><STRONG><a name="[92]"></a>CLOCK_InitEnetPll</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToOverDriveRun
</UL>

<P><STRONG><a name="[8f]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitExternalClk))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
</UL>

<P><STRONG><a name="[90]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
</UL>

<P><STRONG><a name="[94]"></a>CLOCK_InitSysPfd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitSysPfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitSysPfd
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToLowSpeedRun
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToOverDriveRun
</UL>

<P><STRONG><a name="[93]"></a>CLOCK_InitSysPll</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitSysPll))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToLowSpeedRun
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToOverDriveRun
</UL>

<P><STRONG><a name="[a6]"></a>CLOCK_InitUsb1Pfd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_InitUsb1Pfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitUsb1Pfd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToOverDriveRun
</UL>

<P><STRONG><a name="[a5]"></a>CLOCK_InitUsb1Pll</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitUsb1Pll))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToOverDriveRun
</UL>

<P><STRONG><a name="[91]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SwitchOsc))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
</UL>

<P><STRONG><a name="[9e]"></a>ClockSetToLowSpeedRun</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, specific.o(.text.ClockSetToLowSpeedRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ClockSetToLowSpeedRun &rArr; SwitchSystemClocks &rArr; CLOCK_SET_DIV
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitEnetPll
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb1Pfd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb1Pll
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPfd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPfd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchSystemClocks (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_LowSpeedRun
</UL>

<P><STRONG><a name="[a4]"></a>ClockSetToOverDriveRun</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, specific.o(.text.ClockSetToOverDriveRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ClockSetToOverDriveRun &rArr; SwitchSystemClocks &rArr; CLOCK_SET_DIV
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitEnetPll
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitUsb1Pfd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitUsb1Pll
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPfd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchSystemClocks (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitAudioPll
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_OverDriveRun
</UL>

<P><STRONG><a name="[bc]"></a>DCDC_AdjustTargetVoltage</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_dcdc.o(.text.DCDC_AdjustTargetVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_Init
</UL>

<P><STRONG><a name="[c1]"></a>DCDC_BootIntoDCM</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_dcdc.o(.text.DCDC_BootIntoDCM))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_Init
</UL>

<P><STRONG><a name="[9b]"></a>DbgConsole_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fsl_debug_console.o(.text.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DbgConsole_Init &rArr; HAL_UartInit &rArr; LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[a9]"></a>DbgConsole_Printf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>DbgConsole_Vprintf</STRONG> (Thumb, 2438 bytes, Stack size 136 bytes, fsl_debug_console.o(.text.DbgConsole_Vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DbgConsole_Vprintf &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[50]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sai_interrupt_record_playback.o(.text.GPIO1_Combined_0_15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[ad]"></a>GPIO_PinInit</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
</UL>

<P><STRONG><a name="[29]"></a>GPT2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sai_interrupt_record_playback.o(.text.GPT2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[a8]"></a>HAL_UartInit</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, fsl_adapter_lpuart.o(.text.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UartInit &rArr; LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_UartReceiveBlocking</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fsl_adapter_lpuart.o(.text.HAL_UartReceiveBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UartReceiveBlocking &rArr; LPUART_ReadBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Init)
</UL>
<P><STRONG><a name="[7d]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fsl_adapter_lpuart.o(.text.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UartSendBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Init)
</UL>
<P><STRONG><a name="[b2]"></a>I2C_writedata</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sai_interrupt_record_playback.o(.text.I2C_writedata))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_writedata &rArr; LPI2C_MasterSend
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSend
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStart
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tas5805_init_PBTL
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tas5805_init_BTL
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expander_io_init
</UL>

<P><STRONG><a name="[74]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>LPI2C_MasterDeinit</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, fsl_lpi2c.o(.text.LPI2C_MasterDeinit))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
</UL>

<P><STRONG><a name="[b8]"></a>LPI2C_MasterGetDefaultConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C_MasterGetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
</UL>

<P><STRONG><a name="[b9]"></a>LPI2C_MasterInit</STRONG> (Thumb, 610 bytes, Stack size 40 bytes, fsl_lpi2c.o(.text.LPI2C_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LPI2C_MasterInit &rArr; LPI2C_MasterSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSetBaudRate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
</UL>

<P><STRONG><a name="[b4]"></a>LPI2C_MasterSend</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_MasterSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_MasterSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writedata
</UL>

<P><STRONG><a name="[ba]"></a>LPI2C_MasterSetBaudRate</STRONG> (Thumb, 378 bytes, Stack size 52 bytes, fsl_lpi2c.o(.text.LPI2C_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LPI2C_MasterSetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[b3]"></a>LPI2C_MasterStart</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_MasterStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_MasterStart
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writedata
</UL>

<P><STRONG><a name="[b5]"></a>LPI2C_MasterStop</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C_MasterStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPI2C_MasterStop
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writedata
</UL>

<P><STRONG><a name="[b6]"></a>LPI2C_SlaveTransferHandleIRQ</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C_SlaveTransferHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>LPM_AdjustSystemSettings</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, lpm.o(.text.LPM_AdjustSystemSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPM_AdjustSystemSettings &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_AdjustTargetVoltage
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitExternalClk
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitRcOsc24M
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_LowSpeedRun
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_OverDriveRun
</UL>

<P><STRONG><a name="[c0]"></a>LPM_Init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, lpm.o(.text.LPM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPM_Init &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_AdjustTargetVoltage
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_BootIntoDCM
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>LPM_LowSpeedRun</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpm.o(.text.LPM_LowSpeedRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPM_LowSpeedRun &rArr; LPM_AdjustSystemSettings &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToLowSpeedRun
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>LPM_OverDriveRun</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lpm.o(.text.LPM_OverDriveRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPM_OverDriveRun &rArr; LPM_AdjustSystemSettings &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSetToOverDriveRun
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dowithuart
</UL>

<P><STRONG><a name="[6f]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, sai_interrupt_record_playback.o(.text.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART1_IRQHandler &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[70]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[c4]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>LPUART_Init</STRONG> (Thumb, 652 bytes, Stack size 40 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[b0]"></a>LPUART_ReadBlocking</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_ReadBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
</UL>

<P><STRONG><a name="[b1]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_WriteBlocking))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dowithuart
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[78]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SAI1_DriverIRQHandler &rArr; SAI_TransferTxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>SAI1_init</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, sai_interrupt_record_playback.o(.text.SAI1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SAI1_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetCoreFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxSetBitClockRate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxSetBitClockRate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxSetConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxSetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetClassicI2SConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxCreateHandle
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxCreateHandle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
</UL>

<P><STRONG><a name="[79]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_sai.o(.text.SAI3_RX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SAI3_RX_DriverIRQHandler &rArr; SAI3_TransferRxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TransferRxHandleIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_sai.o(.text.SAI3_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SAI3_TX_DriverIRQHandler &rArr; SAI_TransferTxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>SAI3_TransferRxHandleIRQ</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, fsl_sai.o(.text.SAI3_TransferRxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAI3_TransferRxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_RX_DriverIRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>SAI_Deinit</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_Deinit))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
</UL>

<P><STRONG><a name="[cb]"></a>SAI_GetClassicI2SConfig</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fsl_sai.o(.text.SAI_GetClassicI2SConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SAI_GetClassicI2SConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
</UL>

<P><STRONG><a name="[c8]"></a>SAI_Init</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_Init))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
</UL>

<P><STRONG><a name="[cf]"></a>SAI_RxSetBitClockRate</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_RxSetBitClockRate))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
</UL>

<P><STRONG><a name="[d2]"></a>SAI_RxSetConfig</STRONG> (Thumb, 676 bytes, Stack size 32 bytes, fsl_sai.o(.text.SAI_RxSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SAI_RxSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxSetConfig
</UL>

<P><STRONG><a name="[d3]"></a>SAI_TransferAbortReceive</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI_TransferAbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_TransferAbortReceive &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
</UL>

<P><STRONG><a name="[d4]"></a>SAI_TransferAbortSend</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI_TransferAbortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_TransferAbortSend &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
</UL>

<P><STRONG><a name="[d5]"></a>SAI_TransferReceiveNonBlocking</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI_TransferReceiveNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI_TransferReceiveNonBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>SAI_TransferRxCreateHandle</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, fsl_sai.o(.text.SAI_TransferRxCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SAI_TransferRxCreateHandle &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
</UL>

<P><STRONG><a name="[c5]"></a>SAI_TransferRxHandleIRQ</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, fsl_sai.o(.text.SAI_TransferRxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAI_TransferRxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>SAI_TransferRxSetConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI_TransferRxSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SAI_TransferRxSetConfig &rArr; SAI_RxSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxSetConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
</UL>

<P><STRONG><a name="[d6]"></a>SAI_TransferSendNonBlocking</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, fsl_sai.o(.text.SAI_TransferSendNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_TransferSendNonBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>SAI_TransferTxCreateHandle</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, fsl_sai.o(.text.SAI_TransferTxCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SAI_TransferTxCreateHandle &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
</UL>

<P><STRONG><a name="[c6]"></a>SAI_TransferTxHandleIRQ</STRONG> (Thumb, 504 bytes, Stack size 56 bytes, fsl_sai.o(.text.SAI_TransferTxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SAI_TransferTxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TX_DriverIRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>SAI_TransferTxSetConfig</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI_TransferTxSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAI_TransferTxSetConfig &rArr; SAI_TxSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxSetConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
</UL>

<P><STRONG><a name="[ce]"></a>SAI_TxSetBitClockRate</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI_TxSetBitClockRate))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
</UL>

<P><STRONG><a name="[d7]"></a>SAI_TxSetConfig</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, fsl_sai.o(.text.SAI_TxSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_TxSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxSetConfig
</UL>

<P><STRONG><a name="[be]"></a>SDK_DelayAtLeastUs</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsl_common_arm.o(.text.SDK_DelayAtLeastUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDK_DelayAtLeastUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_Init
</UL>

<P><STRONG><a name="[38]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sai_interrupt_record_playback.o(.text.SNVS_HP_WRAPPER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, system_mimxrt1011.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1011.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>SystemInitHook</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_RX_DriverIRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TX_DriverIRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TransferRxHandleIRQ
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxSetConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxSetConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_AdjustSystemSettings
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SET_DIV (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SET_MUX (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferReceiveNonBlocking
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannelConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterDeinit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Deinit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortSend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortReceive
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDefaultConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterSleepMode (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferSendNonBlocking
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxSetBitClockRate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TxSetBitClockRate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxSetConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxSetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetClassicI2SConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxCreateHandle
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxCreateHandle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSend
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[d9]"></a>dowithuart</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, sai_interrupt_record_playback.o(.text.dowithuart))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dowithuart &rArr; outstandby &rArr; SAI1_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetCoreFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_OverDriveRun
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>expander_io_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, sai_interrupt_record_playback.o(.text.expander_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = expander_io_init &rArr; I2C_writedata &rArr; LPI2C_MasterSend
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 1920 bytes, Stack size 64 bytes, sai_interrupt_record_playback.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferReceiveNonBlocking
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannelConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dowithuart
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PrintRunFrequency
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableUsbhs0PhyPllClock
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitAudioPll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins_work
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DoAutoCalibration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDefaultConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_LowSpeedRun
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_OverDriveRun
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferSendNonBlocking
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tas5805_init_PBTL
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tas5805_init_BTL
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxSetBitClockRate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxSetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetClassicI2SConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxCreateHandle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expander_io_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetDefaultConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writedata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[da]"></a>outstandby</STRONG> (Thumb, 548 bytes, Stack size 64 bytes, sai_interrupt_record_playback.o(.text.outstandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = outstandby &rArr; SAI1_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetCoreFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitAudioPll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins_work
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tas5805_init_PBTL
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tas5805_init_BTL
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RxSetBitClockRate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxSetConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetClassicI2SConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxCreateHandle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expander_io_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetDefaultConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dowithuart
</UL>

<P><STRONG><a name="[e4]"></a>set_SAI1_pins_gpio</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, pin_mux.o(.text.set_SAI1_pins_gpio))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
</UL>

<P><STRONG><a name="[e5]"></a>set_SAI3_pins_gpio</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, pin_mux.o(.text.set_SAI3_pins_gpio))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
</UL>

<P><STRONG><a name="[e6]"></a>set_i2c_pins_gpio</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pin_mux.o(.text.set_i2c_pins_gpio))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby
</UL>

<P><STRONG><a name="[e3]"></a>standby</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, sai_interrupt_record_playback.o(.text.standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = standby &rArr; I2C_writedata &rArr; LPI2C_MasterSend
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_i2c_pins_gpio
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterDeinit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SAI3_pins_gpio
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SAI1_pins_gpio
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Deinit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortSend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferAbortReceive
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>tas5805_init_BTL</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, sai_interrupt_record_playback.o(.text.tas5805_init_BTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tas5805_init_BTL &rArr; I2C_writedata &rArr; LPI2C_MasterSend
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
</UL>

<P><STRONG><a name="[df]"></a>tas5805_init_PBTL</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, sai_interrupt_record_playback.o(.text.tas5805_init_PBTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tas5805_init_PBTL &rArr; I2C_writedata &rArr; LPI2C_MasterSend
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outstandby
</UL>

<P><STRONG><a name="[f6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7f]"></a>tx_callback</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, sai_interrupt_record_playback.o(.text.tx_callback))
<BR>[Address Reference Count : 1]<UL><LI> sai_interrupt_record_playback.o(.text.SAI1_init)
</UL>
<P><STRONG><a name="[80]"></a>rx_callback</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sai_interrupt_record_playback.o(.text.rx_callback))
<BR>[Address Reference Count : 1]<UL><LI> sai_interrupt_record_playback.o(.text.SAI1_init)
</UL>
<P><STRONG><a name="[81]"></a>rx_callback3</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sai_interrupt_record_playback.o(.text.rx_callback3))
<BR>[Address Reference Count : 2]<UL><LI> sai_interrupt_record_playback.o(.text.outstandby)
<LI> sai_interrupt_record_playback.o(.text.main)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
