

=================crc32---ok=======================
  
uint32_t calcu_crc32(uint32_t *idatain, uint32_t len)
{
   uint32_t icrc_poly = 0x04C11DB7;  
   uint32_t icrc_out = 0xffffffff;  

   for(uint32_t i = 0; i &lt; len; i++)
   {
      icrc_out ^= idatain[i];  

      for (uint8_t j = 0; j &lt; 32; j++)
      {
         if (icrc_out &amp; 0x80000000)
            icrc_out = (icrc_out &lt;&lt; 1) ^ icrc_poly;
         else
            icrc_out &lt;&lt;= 1;
      }
   }
   
   return (icrc_out);
}


uint32_t calcu_crc32ex(uint32_t *idatain, uint32_t len, uint32_t icrc_in)
{
   uint32_t icrc_poly = 0x04C11DB7;  
   uint32_t icrc_out = icrc_in;  

   for(uint32_t i = 0; i &lt; len; i++)
   {
      icrc_out ^= idatain[i];        
      
      //Send_Data_To_UART1(i);  //test

      for (uint8_t j = 0; j &lt; 32; j++)
      {
         if (icrc_out &amp; 0x80000000)
            icrc_out = (icrc_out &lt;&lt; 1) ^ icrc_poly;
         else
            icrc_out &lt;&lt;= 1;
      }
   }
   
   return (icrc_out);
}

---------------------


uint32_t PY_CRC_32_T32_STM32(uint32_t *di, uint32_t len)     //ok
{
   uint32_t crc_poly = 0x04C11DB7;  
   uint32_t data_t = 0xffffffff;  

   for(uint32_t i = 0; i &lt; len; i++)
   {
      data_t ^= di[i]; //32-bit data

      for (uint8_t j = 0; j &lt; 32; j++)
      {
         if (data_t &amp; 0x80000000)
         data_t = (data_t &lt;&lt; 1) ^ crc_poly;
         else
         data_t &lt;&lt;= 1;
      }
   }
   return (data_t);
}


-------------------------stm32Ó²¼þ---stm32c011F6-------------------------


uint32_t stm32_crc32(uint32_t *idatain, uint32_t len)
{
   register uint32_t data = 0;
   register uint32_t index = 0;
   
   LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);

   for(uint32_t i = 0; i &lt; len; i++)
   {
      LL_CRC_FeedData32(CRC,  idatain[i]);
   }

   return (LL_CRC_ReadData32(CRC));
}

uint32_t stm32_crc32ex(uint32_t *idatain, uint32_t len, uint32_t icrc_in)
{
   register uint32_t data = 0;
   register uint32_t index = 0;
   
   LL_CRC_SetInitialData(CRC, icrc_in);

   for(uint32_t i = 0; i &lt; len; i++)
   {
      LL_CRC_FeedData32(CRC,  idatain[i]);
   }

   return (LL_CRC_ReadData32(CRC));
}


=================crc8---´ýÑéÖ¤=======================
 

define CRC_POLYNOMIAL_8 0x0C

uint8 crc_8(uint8 crc, uint8* pdata, uint32 len)
{
   for (uint32 i = 0; i < len; i++)
   {
      crc ^= pdata[i];
      for (uint8 j = 0; j < 8; j++)
      {
         if ((crc & 0x80u) > 0)
         {
            crc = ( (uint8)(crc << 1u) ) ^ CRC_POLYNOMIAL_8;
         }
         else
         {
            crc <<= 1u;
         }
      }
   }
   return crc;
}





